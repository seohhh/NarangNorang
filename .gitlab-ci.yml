# 실행될 stage 지정 (위에서 아래로 차례대로 실행)
stages:
  - build
  - package
  - deploy

fe-build:   # JOB 이름
  # 사용될 이미지 설정
  image: node:14.17.0
  # stage 설정
  stage: build
  # tag 설정 (수행이 이루어질 GitLab-Runner tag 등록)
  tags:
    - narangnorang-cicd
  # 실행될 script 설정
  script:
    - cd Frontend
    - npm install
    - npm run build
  # artifacts 설정 (bulld를 통해 생성된 파일을 job artifacts에 보관하여 다음에 수행되는 JOB에서 가져다 활용할 수 있게 도와줌)
  artifacts:
    # 보관이 이루어질 경로 설정
    paths:
      - Frontend/node_modules
    # 유효기간 설정
    expire_in: 1 days
  # JOB 수행 조건 설정
  only:
    # JOB이 수행 될 branch 설정
    refs:
      - develop
      - master
    # JOB이 수행될 폴더 경로 설정
    changes:
      - frontend/**/*

be-build:  # JOB 이름
  # 사용될 이미지 설정
  image: gradle:6.8.3-jdk11
  # stage 설정
  stage: build
  # tag 설정 (수행이 이루어질 GitLab-Runner tag 등록)
  tags:
    - narangnorang-cicd
  # 실행될 script 설정
  script:
    - cd Backend
    - ./gradlew bootJar
  # artifacts 설정 (bulld를 통해 생성된 파일을 job artifacts에 보관하여 다음에 수행되는 JOB에서 가져다 활용할 수 있게 도와줌)
  artifacts:
    # 보관이 이루어질 경로 설정
    paths:
      - Backend/build/libs/*.jar
    # 유효기간 설정
    expire_in: 1 days
  # JOB 수행 조건 설정
  only:
    # JOB이 수행 될 branch 설정
    refs:
      - develop
      - master
    # JOB이 수행될 폴더 경로 설정
    changes:
      - backend/**/*


# 전역 변수 설정
variables:
  FE_IMAGE_NAME: $DOCKER_HUB_NAME/fe:latest   # FE 이미지 이름
  BE_IMAGE_NAME: $DOCKER_HUB_NAME/be:latest   # BE 이미지 이름

fe-package:   # JOB 이름
  # 사용될 이미지 설정
  image: docker:latest
  # stage 설정
  stage: package
  # tag 설정 (수행이 이루어질 GitLab-Runner tag 등록)
  tags:
    - narangnorang-cicd
  # service 설정 (설정한 image가 작업이 이루어지는 동안 실행되는 docker 이미지)
  services:
    - docker:dind
  # script가 실행 전 수행 될 script
  before_script:
    - docker login -u $DOCKER_HUB_ID --password $DOCKER_HUB_PW   # Docker Hub에 로그인
  # 실행될 script 설정
  script:
    - docker build -t $FE_IMAGE_NAME Frontend/.   # fe에 있는 Dockerfile로 build
    - docker push $FE_IMAGE_NAME   # DockerHub에 image push
  # script가 실행된 후 수행 될 script
  after_script:
    - docker logout   # DockerHub 로그아웃
  # JOB 수행 조건 설정
  only:
    # JOB이 수행 될 branch 설정
    refs:
      - develop
      - master
    # JOB이 수행될 폴더 경로 설정
    changes:
      - frontend/**/*

be-package:  # JOB 이름
  # 사용될 이미지 설정
  image: docker:latest
  # stage 설정
  stage: package
  # tag 설정 (수행이 이루어질 GitLab-Runner tag 등록)
  tags:
    - narangnorang-cicd
  # service 설정 (설정한 image가 작업이 이루어지는 동안 실행되는 docker 이미지)
  services:
    - docker:dind
  # script가 실행 전 수행 될 script
  before_script:
    - docker login -u $DOCKER_HUB_ID --password $DOCKER_HUB_PW   # Docker Hub에 로그인
  # 실행될 script 설정
  script:
    - docker build -t $BE_IMAGE_NAME Backend/.   # be에 있는 Dockerfile로 build
    - docker push $BE_IMAGE_NAME   # DockerHub에 image push
  # script가 실행된 후 수행 될 script
  after_script:
    - docker logout   # DockerHub 로그아웃
  # JOB 수행 조건 설정
  only:
    # JOB이 수행 될 branch 설정
    refs:
      - develop
      - master
    # JOB이 수행될 폴더 경로 설정
    changes:
      - backend/**/*


fe-deploy:   # JOB 이름
  # stage 설정
  stage: deploy
  # tag 설정 (수행이 이루어질 GitLab-Runner tag 등록)
  tags:
    - narangnorang-cicd
  # script가 실행 전 수행 될 script
  before_script:
    - docker login -u $DOCKER_HUB_ID --password $DOCKER_HUB_PW   # Docker Hub에 로그인
  # 실행될 script 설정
  script:
    - docker rm -f front || true   # 기존에 존재하던 Container 삭제
    - docker rmi $FE_IMAGE_NAME || true   # 기존에 존재하던 이미지 삭제
    - docker pull $FE_IMAGE_NAME   # DockerHub에서 이미지 가져오기
    - docker run --name front -p 3000:3000 -d $FE_IMAGE_NAME   # Container 생성 및 실행
  # script가 실행된 후 수행 될 script
  after_script:
    - docker logout   # DockerHub 로그아웃
  # JOB 수행 조건 설정
  only:
    # JOB이 수행 될 branch 설정
    refs:
      - develop
      - master
    # JOB이 수행될 폴더 경로 설정
    changes:
      - frontend/**/*

be-deploy:   # JOB 이름
  # stage 설정
  stage: deploy
  # tag 설정 (수행이 이루어질 GitLab-Runner tag 등록)
  tags:
    - narangnorang-cicd
  # script가 실행 전 수행 될 script
  before_script:
    - docker login -u $DOCKER_HUB_ID --password $DOCKER_HUB_PW   # Docker Hub에 로그인
  # 실행될 script 설정
  script:
    - docker rm -f back || true   # 기존에 존재하던 Container 삭제
    - docker rmi $BE_IMAGE_NAME || true   # 기존에 존재하던 이미지 삭제
    - docker pull $BE_IMAGE_NAME   # DockerHub에서 이미지 가져오기
    - docker run --name back -p 8080:8080 -d $BE_IMAGE_NAME   # Container 생성 및 실행
  # script가 실행된 후 수행 될 script
  after_script:
    - docker logout   # DockerHub 로그아웃
  # JOB 수행 조건 설정
  only:
    # JOB이 수행 될 branch 설정
    refs:
      - develop
      - master
    # JOB이 수행될 폴더 경로 설정
    changes:
      - backend/**/*